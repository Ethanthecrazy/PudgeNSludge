//////////////////////////////////////////////////////////////////////////////////////
// Filename:	CComponent_Lil_Goo_AI.h
// Author:		Josh Fields
// Date:		5/24/12
// Purpose:		This class holds the information for the little goo AI
//////////////////////////////////////////////////////////////////////////////////////
#ifndef CCOMPONENT_LIL_GOO_AI_H
#define CCOMPONENT_LIL_GOO_AI_H

#include "CComponent_AI.h"
class CSceneObject;
class CComponent_LittleGooCollision;
class CComponent_Sound;
class CComponent_Animation;
//class CComponent_Emitter;

class CComponent_Lil_Goo_AI : public CComponent_AI
{
private:
	float m_fElapsedTime;
	std::vector <CSceneObject*> m_vCurNearObjects;
	bool m_bMoveDirection;
	int m_nPrevDirection;
	vec3f OldCenter;
	CComponent_LittleGooCollision* m_pCollisionCmp;
	bool m_bCurrentlyCollided;
	bool m_bPreviouslyCollided;
	bool m_bPrevOnGround;
	float m_fJumpTimer;
	float m_fSucideTimer;
	bool m_bInGoo;
	bool m_bJumpAttack;
	bool m_bAttacking;
	bool m_bSucideing;
	bool m_bDead;
	float m_fPreviousDownVel;
	CComponent_Sound* m_pSoundCmp;
	bool m_bInRange;

	// Pointer to Animation Component
	CComponent_Animation* m_pAnimComponent;

	// Pointer to the Object Created for the Lil Goo Effect Trail.
	IBaseObject*	m_plilGooTrailEffect;
private:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SimulateMoveRight():	Checks if the little goo will be on the same platform when he jumps and moves to the right
	//
	// Returns:		bool
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool SimulateMoveRight ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SimulateMoveLeft():	Checks if the little goo will be on the same platform when he jumps and moves to the left
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool SimulateMoveLeft ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Attack():	Attack the current Target and kill the little goo
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Attack ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Move():	Move the little goo around the level avoiding edges
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Move ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Move():	Takes in a IBaseObject pointer (_pTarget). this will move the little goo toward the target passed in
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Move (IBaseObject* _pTarget);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Avoide():	the little goo should try and avoid crushers
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Avoide (IBaseObject* _pHazard);

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CComponent_Lil_Goo_AI():	Default Constructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CComponent_Lil_Goo_AI ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CComponent_Lil_Goo_AI():	Default Destructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~CComponent_Lil_Goo_AI ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Initialize():	Inits all the information for the little goo AI
	//
	// Returns:		bool
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Initialize ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Shutdown():	Shutdowns the little goo AI
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Shutdown ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Update():	Updates the little goo AI
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update ( float _fElapsedTime );

	///////////////
	// accessors //
	///////////////
	bool GetInGoo(void) { return m_bInGoo; }
	bool GetDead(void) { return m_bDead; }
	bool GetDirection(void) { return m_bMoveDirection; }
	bool GetPrevCol(void) { return m_bPreviouslyCollided; }
	bool GetPrevGroundCol(void) { return m_bPrevOnGround; }

	//////////////
	// mutators //
	//////////////
	void SetInGoo(bool bInGoo) { m_bInGoo = bInGoo; }
	void SetDead(bool bDead) { m_bDead = bDead; }
	void SetDirection(bool _Direction) { m_bMoveDirection = _Direction; }
	void SetPrevCol(bool _PrevCol) { m_bPreviouslyCollided = _PrevCol; }

	// Set the object pointer to the little Goo trail effect.
	void SetLilGooTrailEffectObject( IBaseObject* _obj ) { m_plilGooTrailEffect = _obj; }
};
#endif