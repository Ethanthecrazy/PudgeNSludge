//////////////////////////////////////////////////////////////////////////////////////
// Filename:	CollisionCircle.h
// Author:		Josh Fields
// Date:		5/24/12
// Purpose:		This class holds on to the information for a Circle
//////////////////////////////////////////////////////////////////////////////////////
#ifndef CollisionCircle_H
#define CollisionCircle_H

#include "CollisionVolume.h"
#include "CollisionPoint.h"

class CCollisionCircle : public CCollisionVolume
{
protected:
	CCollisionPoint m_cptCenter;
	float m_fRadius;

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CCollisionCircle():	Default Constructor
	//
	// Returns:		Void
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CCollisionCircle ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ~CCollisionCircle():	Default Destructor
	//
	// Returns:		Void
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~CCollisionCircle ();

	/////////////////////////////
	//  Accessors
	/////////////////////////////
	vec2f GetCenter2D () { return m_cptCenter.Get2DCentorid(); }
	vec3f GetCenter3D () { return m_cptCenter.Get3DCentorid(); }

	float GetRadius () { return m_fRadius; }

	/////////////////////////////
	//  Mutators
	/////////////////////////////
	void SetCenter ( vec2f _v2Center ) { m_cptCenter.Set2DCentorid (_v2Center); }
	void SetCenter ( vec3f _v3Center ) { m_cptCenter.Set3DCentorid (_v3Center); }

	void SetRadius ( float _fRadius ) { m_fRadius = _fRadius; }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CircleToCircle():	Takes in a Circle (cirB) and an Output vec2f
	//						(vNewPosB). Check collision between the cirlce passed in and the circle that called the function
	//						ingoring the Z axis. Places the new center position for cirlce B in the output vec2f (vNewPosB)
	//						and returns true if they are colliding.
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool CircleToCircle( CCollisionCircle cirB, vec2f& vNewPosB);
};
#endif