//////////////////////////////////////////////////////////////////////////////////////
// Filename:	CollisionPoint.cpp
// Author:		Josh Fields
// Date:		5/24/12
// Purpose:		This class holds on to the information of a 2D and 3D point.
//				All 2D points ingore the Z axis
//////////////////////////////////////////////////////////////////////////////////////
#include "CollisionPoint.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CCollisionPoint():	Default Constructor
//
// Returns:		Void
//
// Mod. Name:
// Mod. Date:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CCollisionPoint::CCollisionPoint ()
{
	m_btType = BT_NULL;
	m_vtType = VMT_POINT;

	m_v2Centorid = vec2f (0.0f, 0.0f);
	m_v3Centorid = vec3f (0.0f, 0.0f, 0.0f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ~CCollisionPoint():	Default Destructor
//
// Returns:		Void
//
// Mod. Name:
// Mod. Date:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CCollisionPoint::~CCollisionPoint ()
{

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set2DCentorid():	This will set the 2D centorid to the passed in 2D centorid and will set
//					the 3D centorids X and Y to the 2D centorids X and Y.
//
// Returns:		Void
//
// Mod. Name:
// Mod. Date:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CCollisionPoint::Set2DCentorid ( vec2f _v2Centorid )
{
	m_v2Centorid = _v2Centorid;
	m_v3Centorid = vec3f (_v2Centorid.x, _v2Centorid.y, 0.0f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set3DCentorid():	This will set the 3D centorid to the passed in 3D centorid and will set
//					the 2D centorids X and Y to the 3D centorids X and Y.
//
// Returns:		Void
//
// Mod. Name:
// Mod. Date:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CCollisionPoint::Set3DCentorid ( vec3f _v3Centorid )
{
	m_v3Centorid = _v3Centorid;
	m_v2Centorid = vec2f (_v3Centorid.x, _v3Centorid.y);
}
