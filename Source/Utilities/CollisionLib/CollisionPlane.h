//////////////////////////////////////////////////////////////////////////////////////
// Filename:	CollisionPoint.h
// Author:		Josh Fields
// Date:		5/24/12
// Purpose:		This class holds on to the information for a plane
//////////////////////////////////////////////////////////////////////////////////////
#ifndef CollisionPlane_H
#define CollisionPlane_H

#include "CollisionVolume.h"
#include "CollisionPoint.h"

class CCollisionLine;
class CCollisionSphere;
class CCollisionCapsule;
class CCollisionAABB;


class CCollisionPlane : public CCollisionVolume
{
protected:
	CCollisionPoint m_cptPoint;
	CCollisionPoint m_cptNormal;
	float m_fOffset;

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CCollisionPlane():	Default Constructor
	//
	// Returns:		Void
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CCollisionPlane ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ~CCollisionPlane():	Default Destructor
	//
	// Returns:		Void
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~CCollisionPlane ();

	/////////////////////////////
	//  Accessors
	/////////////////////////////
	vec2f GetPoint2D () { return m_cptPoint.Get2DCentorid(); }
	vec3f GetPoint3D () { return m_cptPoint.Get3DCentorid(); }

	vec2f GetNormal2D () { return m_cptNormal.Get2DCentorid(); }
	vec3f GetNormal3D () { return m_cptNormal.Get3DCentorid(); }

	float GetOffset () { return m_fOffset; }

	/////////////////////////////
	//  Mutators
	/////////////////////////////
	void SetPoint ( vec2f _v2Point ) { m_cptPoint.Set2DCentorid (_v2Point); }
	void SetPoint ( vec3f _v3Point ) { m_cptPoint.Set3DCentorid (_v3Point); }

	void SetNormal ( vec2f _v2Normal ) { m_cptNormal.Set2DCentorid (_v2Normal); }
	void SetNormal ( vec3f _v3Normal ) { m_cptNormal.Set3DCentorid (_v3Normal); }

	void SetOffset ( float _fOffset ) { m_fOffset = _fOffset; }


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ComputePlane():	Takes in 3 Points (pointA, pointB, pointC). This computes a plane based on the 3 passed in point and
	//					places the new plane in the plane that called this function.
	//
	// Returns:		Void
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ComputePlane( CCollisionPoint pointA, CCollisionPoint pointB, CCollisionPoint pointC );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// PositiveHalfSpaceTest():	This function returns true if the vec3f point is on the positive side or on the plane.
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool PositiveHalfSpaceTest ( vec3f vPoint );
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// NegativeHalfSpaceTest():	Takes in a vec3f (vPoint). This function returns true if the vec3f point is on the negative
	//							side of the plane
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool NegativeHalfSpaceTest ( vec3f vPoint );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SphereToPlaneHalfSpaceTest():	Takes in a Sphere (spA).  Returns true if the sphere is in front of or on the plane.
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool SphereToPlaneHalfSpaceTest (CCollisionSphere spA);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CapsuleToPlaneHalfSpaceTest():	Takes in a Capsule(cpA).  Returns true if the capsule is in front of or on the plane.
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool CapsuleToPlaneHalfSpaceTest (CCollisionCapsule cpA);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// LineToPlane():	Takes in a Line(lnA) and an output vec3f (ptA).
	//			Returns true if the line is colliding with the plane and fills the 
	//					output vec3f with the collision point.
	//
	// Returns:		bool
	//
	// Mod. Name:
	// Mod. Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool LineToPlane ( CCollisionLine lnA, vec3f& ptA );

///////////////////////////////////////////////////////////////////////////////////
	// Function Name: ClassifyAABBToPlane
	// Purpose: Takes in a AABB and tests it against the invoking object which is
	//			a plane and determines whether it is infront of the plane, behind
	//			or straddeling.
	// Original Author: Andy Madruga
	// Creation Date: 5/25/2012
	// Last Modification By:	
	// Last Modification Date:	
	///////////////////////////////////////////////////////////////////////////////////
	int ClassifyAABBToPlane( CCollisionAABB& aabb );

};
#endif