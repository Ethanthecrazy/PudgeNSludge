#ifndef CLILGOOMOVEAI_H_
#define CLILGOOMOVEAI_H_

#include "IBaseAI.h"
#include "../Utilities/CollisionLib/CollisionShapes.h"
#include "../ComponentManager/CComponent_Sound.h"
#include "../ComponentManager/CComponent_Item.h"
#include "../ComponentManager/CComponent_Animation.h"

class CLilGooMoveAI : public IBaseAI
{
private:
	float m_fElapsedTime;
	std::vector <CSceneObject*> m_vCurNearObjects;
	bool m_bMoveDirection;
	int m_nPrevDirection;
	vec3f OldCenter;
	float m_fJumpTimer;
	float m_fChangeDirTimer;
	CComponent_Item* m_pItemCmp;
	float m_fAmountMoved;
	vec3f m_tPrevPos;
	// Pointer to Animation Component
	CComponent_Animation* m_pAnimComponent;

	// Pointer to the Object Created for the Lil Goo Effect Trail.
	IBaseObject*	m_plilGooTrailEffect;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SimulateMoveRight():	Checks if the little goo will be on the same platform when he jumps and moves to the right
	//
	// Returns:		bool
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool SimulateMoveRight ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SimulateMoveLeft():	Checks if the little goo will be on the same platform when he jumps and moves to the left
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool SimulateMoveLeft ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Move():	Move the little goo around the level avoiding edges
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Move ();

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// LilGooMoveAI():	default constructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CLilGooMoveAI (IBaseObject* _pParent);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ~LilGooMoveAI():	default destructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~CLilGooMoveAI ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Init():	init all member variables.
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Init ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Shutdown():	delete any allocated memory and reset member variables
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Shutdown ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Update(float _fElapsedTime):	update the little goos ai to move around the level
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update (float _fElapsedTime);

	///////////////
	// accessors //
	///////////////
	bool GetDirection(void) { return m_bMoveDirection; }
	bool GetMoveDirection(void) { return m_bMoveDirection; }

	//////////////
	// mutators //
	//////////////
	void SetDirection(bool _Direction) { m_bMoveDirection = _Direction; }
	void SetLilGooTrailEffectObject( IBaseObject* _obj ) { m_plilGooTrailEffect = _obj; }
	void SetMoveDirection(bool _bMoveDir);
	void SetDirectionTimer( float _value ) { m_fChangeDirTimer = _value; }
};
#endif