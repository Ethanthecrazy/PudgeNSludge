#ifndef _EFFECTS_H
#define _EFFECTS_H
#include "../PS/config.h"
#include "../Utilities/MathLib/vec3.h"
#include <vector>
#include <fstream>
#include <string>


class CEmitter;
class CCamera;

class CEffects
{
	friend class CParticleManager;
private:
	std::vector<CEmitter> m_vEmitters;
	int m_nNumEmitters;
	int m_nParticleIndex;
	int m_nActiveIndex;
	bool m_bActive;
public:
	int GetActiveIndex() const { return m_nActiveIndex; }
	void SetActiveIndex(int val) { m_nActiveIndex = val; }
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Constructors: Default constructor, destructor
	// Returns: void
	// Mod. Name: KC
	// Mod. Date: 5/8/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CEffects();
	~CEffects();
	CEffects( CEffects& var);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Update: Updates the particles
	// Returns: void
	// Mod. Name: KC
	// Mod. Date: 5/8/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update(float dt);

	void UpdatePointToPoint(float dt, vec3f start, vec3f end);
	void UpdatePointToDirection(float dt);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Render: Renders the particles
	// Returns: void
	// Mod. Name: KC
	// Mod. Date: 5/8/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Accessors: Returns data 
	// Returns: void
	// Mod. Name: KC
	// Mod. Date: 5/8/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<CEmitter>& GetEmitters() { return m_vEmitters; }
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Mutators: Sets data 
	// Returns: void
	// Mod. Name: KC
	// Mod. Date: 5/8/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetEmitters(std::vector<CEmitter> val) { m_vEmitters = val; }
};
#endif