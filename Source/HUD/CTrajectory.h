/////////////////////////////////////////////////////////////////////////////////////////////////////
// Class Name: CTrajectory
//
// Purpose: Manage the trajectory line created when the player
//			has an object
//
// Original Author: Rueben Massey
//
// Creation Date:7/8/2012
//
// Last Modification By: 
// Last Modification Date: 
/////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef TRAJECTORY_H_
#define TRAJECTORY_H_

// Defines
#define MAX_TRAJECTORY 20

// Includes
#include <vector>
#include "..//Utilities/CollisionLib/CollisionShapes.h"

__declspec(align(32))
class CTrajectory 
{
private:
	// Pointer to the collision volume
	Box* m_CollisionVolume;
	matrix4f m_PosMat;
	vec2f m_VecToCursor;
	vec3f m_StartPos;
	float m_fPositionTimer;
	bool m_bHasCollided;
	int m_nTrajectoryCounter;
	int m_nFrameCounter;
	float m_fTimeOut;

	std::vector<vec3f> m_TrajectoryPositionVector;

	int m_pTrajectoryTexture;

public:

	CTrajectory();

	~CTrajectory();

	/////////////////////////////////////////
	//	Accessors
	/////////////////////////////////////////
	Box* GetCollisionVolume() const { return m_CollisionVolume; }
	matrix4f GetPosMat() const { return m_PosMat; }
	vec2f GetVecToCursor() const { return m_VecToCursor; }
	vec3f GetStartPos() const { return m_StartPos; }
	
	/////////////////////////////////////////
	//	Mutators
	/////////////////////////////////////////
	void SetCollisionVolume(Box* val) { m_CollisionVolume = val; }
	void SetPosMat(matrix4f val) { m_PosMat = val; }
	void SetVecToCursor(vec2f val) { m_VecToCursor = val; }
	void SetStartPos(vec3f val) { m_StartPos = val; }
	

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: Initialize()
	// Purpose: Initializes data members
	// Original Author: Rueben Massey
	// Creation Date: 7/11/2012
	// Last Modification By:
	// Last Modification Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Initialize( void );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: shutdown()
	// Purpose: Reset all values and clean up memory
	// Original Author: Rueben Massey
	// Creation Date: 7/11/2012
	// Last Modification By:
	// Last Modification Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void shutdown( void );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: Update()
	// Purpose: Simulate the movement of the object and fill the position vector
	// Original Author: Rueben Massey
	// Creation Date: 7/11/2012
	// Last Modification By:
	// Last Modification Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fDT );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: UpdateLine()
	// Purpose: Update the position vector
	// Original Author: Rueben Massey
	// Creation Date: 7/14/2012
	// Last Modification By:
	// Last Modification Date:
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void UpdateLine( void );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: CheckDynamicCollisions()
	// Purpose: Check collisions with all dynamic objects
	// Original Author: Rueben Massey
	// Creation Date: 7/9/2012
	// Last Modification By: 
	// Last Modification Date: 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void CheckDynamicCollisions( CCollisionVolume* pCurVolume, float fDT );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: CheckStaticCollisions()
	// Purpose: Check collisions with all static objects
	// Original Author: Rueben Massey
	// Creation Date: 7/9/2012
	// Last Modification By: 
	// Last Modification Date: 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void CheckStaticCollisions(  CCollisionVolume* pCurVolume, float fDT );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: Render()
	// Purpose: Render the trajectory line
	// Original Author: Rueben Massey
	// Creation Date: 7/9/2012
	// Last Modification By: 
	// Last Modification Date: 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Render( void );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function Name: RenderLine()
	// Purpose: Render the Laser line
	// Original Author: Rueben Massey
	// Creation Date: 7/14/2012
	// Last Modification By: 
	// Last Modification Date: 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void RenderLine( void );

};
#endif  //CCOMPONENT_TRAJECTORY_H_