#ifndef PHYSICSENVIRONMENT_H
#define PHYSICSENVIRONMENT_H

//////////////////////////////////////////////////////////////////////////////////////
// Filename:            PhysicsEnvironment.h
// Author:              Ethan Pendergraft
// Date:                5/9/12
// Purpose:             This contains and updates all of the 
//						physics points and constraints in the game.
//////////////////////////////////////////////////////////////////////////////////////

#include "../Utilities/MathLib/vec3.h"
#include "../Utilities/MathLib/vec2.h"
#include <list>

__declspec(align(32))
class tPhyPoint
{
public:
	vec3f m_CurrPos;
	vec3f m_PrevPos;
};

__declspec(align(32))
class tPhyConstraint
{
public:
	tPhyPoint* m_pPoint1;
	tPhyPoint* m_pPoint2;
	float m_fDist;
};

__declspec(align(32))
class tPhyVelocityConstraint
{
public:
	tPhyPoint*	m_pTarget;
	float		m_fLimit;
};

__declspec(align(32))
class tPhyObject
{
public:

	tPhyPoint*								m_pPoints[3];
	tPhyConstraint*							m_pConstraints[3];
	std::list< tPhyVelocityConstraint* >	m_pVelConstraints;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GetCentroid():		Returns the center of the physics object.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vec3f GetCentroid();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GetPrevCentroid():	Returns the center of the physics object, last frame.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vec3f GetPrevCentroid();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GetXAxis():	Returns the X Axis( Clockwise ) from the matrix of the object.
	//				Note: It will probably have to be negated.				
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vec3f GetXAxis();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GetYAxis():			Returns the Y axis.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vec3f GetYAxis();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ApplyUniformForce():	Applies an equal force to the entire object.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ApplyUniformForce( vec3f _fDirection, float _fMagnitude );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// NegateVelocity():	Destroys the velocity of the object.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void NegateVelocity();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// SetPosition():	Sets the position of the object, in world space.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void SetPosition( vec3f _pos );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Offset():			Pops the object in a direction, regardless of collision.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Offset( vec3f _direction );

};


__declspec(align(32))
class CPhysicsEnvironment
{

private:

	std::list< tPhyPoint* >					m_pPointList;
	std::list< tPhyConstraint* >			m_pConstList;
	std::list< tPhyObject* >				m_pBoxList;
	std::list< tPhyVelocityConstraint* >	m_pVelConstList;

	vec3f							m_fGravity;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// AddPoint():		Creates a point in the physics environment.
	//
	// Returns:			tPhyPoint* - Returns a pointer to the point that was just created.                               
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tPhyPoint* AddPoint( vec3f _pos );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// AddConstraint():	Creates a contraint between two points.
	//
	// Returns:			tPhyConstraint* - Returns a pointer to the constraint that was just created in the environment.                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tPhyConstraint*	AddConstraint( float _fDistance, tPhyPoint* _first, tPhyPoint* _second );


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// RemovePoint():	Removes a point from the physics environemnt, includes cleanup.
	//
	// Returns:			Void                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemovePoint( tPhyPoint* _toRemove );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// RemoveConstraint():	Removes a constraint from the physics environment, includes cleanup.
	//
	// Returns:				Void                              
	//
	// Mod. Name:			EP
	// Mod. Date:			5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemoveConstraint( tPhyConstraint* _pToRemove );  

public:

	/////////////////////////////
	//  Accessors
	/////////////////////////////
	void SetGravity( vec3f _fGravity ) { m_fGravity = _fGravity; }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CPhysicsEnvironment():	THe constructor overload.
	//
	// Returns:					Void                              
	//
	// Mod. Name:				EP
	// Mod. Date:				5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CPhysicsEnvironment() { m_fGravity = vec3f( 0.0f, 0.0f, 0.0f ); }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Update():		Updates the physics environment, stepping all of the points and constraints forward.
	//
	// Returns:			Void                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update( float fDT );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Clear():			Removes all points, constraints, and boxes from the physics environment. Includes cleanup.
	//
	// Returns:			Void                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Clear();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// AddBox():		Adds a box constructed from constraints and points to the physics environment.
	//
	// Returns:			tPhyBox* - A pointer to the box that was created.                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tPhyObject* AddPhyObject( vec3f _centeroid, float _fRadius );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// RemoveBox():		Removes a box from the physics environment. Includes cleanup.
	//
	// Returns:			Void                              
	//
	// Mod. Name:       EP
	// Mod. Date:       5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void RemovePhyObject( tPhyObject* _pToRemove );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ApplyUniformForce():		Applies a force to all of the points that make up a box.
	//							Warning: This is VERY potent. Values larger than 1.0 can be unstable.
	//
	// Returns:					Void                              
	//
	// Mod. Name:				EP
	// Mod. Date:				5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ApplyUniformForce( vec3f _fDirection, float _fMagnitude, tPhyObject* _target );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ApplyPointForce():	This isnt written yet, so don't call it.
	//
	// Returns:				Void                              
	//
	// Mod. Name:			EP
	// Mod. Date:			5/10/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ApplyPointForce( vec3f _position, vec3f _fDirection, vec3f _Magnitude, tPhyObject* _target );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// AddVelConstraint():	Adds a velocity constraint that prevents the 
	//						object from accelerating to a velocity faster 
	//						than the limit.
	//
	// Returns:				VOID                             
	//
	// Mod. Name:			EP
	// Mod. Date:			5/12/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void AddVelConstraint( float _fLimit, tPhyObject* _target );

	void SimulateObject( tPhyObject* _toSimulate, float fDT );

};

#endif // PHYSICSENVIRONMENT_H