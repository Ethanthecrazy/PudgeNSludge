//////////////////////////////////////////////////////////////////////////////////////
// Filename:	CComponent_AI.h
// Author:		Josh Fields
// Date:		5/24/12
// Purpose:		This class holds the information for basic AI
//////////////////////////////////////////////////////////////////////////////////////
#ifndef CCOMPONENT_AI_H
#define CCOMPONENT_AI_H

#include "IComponent.h"
#include "../Utilities/CollisionLib/CollisionShapes.h"

class IBaseAI;

class IBaseObject;

#define MAX_GOO_SPEED 15
#define MAX_SLIME_SPEED 20
#define MAX_HULK_SPEED 30

//enum eAIType {AI_NULL, AI_LIL_GOO, AI_SLIME_MONSTER, AI_JUNK_HULK, AI_MAX };

enum AIType {AI_NULL, AI_IDLE, AI_MOVE, AI_ATTACK, AI_HIDE, AI_DEAD, AI_MAX };

class CComponent_AI : public IComponent
{
private:
	IBaseAI* m_pCurrAI;
	std::vector<IBaseAI*> m_vLoadedAIs;
	bool m_bActive;

public:

	void SwitchAI ( AIType _eType );
	void AddAI ( AIType _eType, IBaseAI* _pAI);


///// this is the old ai stuff and is being changed
protected:
	//vec3f m_v3Velocity;
	//eAIType m_aiType;
	//IBaseObject* m_pTarget;
	//IBaseObject* m_pCurPlatform;
	//Sphere m_spAggro;
	//Sphere m_spAttack;
	//bool m_bOnGround;
	
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Attack():	virtual attack
	////
	//// Returns:		Void
	////
	//// Mod. Name: JF
	//// Mod. Date: 6/2/12
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//void Attack ();
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Move():	virtual Move
	////
	//// Returns:		Void
	////
	//// Mod. Name: JF
	//// Mod. Date: 6/2/12
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//void Move ();
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Move(IBaseObject* _pTarget):	virtual Move
	////
	//// Returns:		Void
	////
	//// Mod. Name: JF
	//// Mod. Date: 6/2/12
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//void Move (IBaseObject* _pTarget);
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Avoide():	virtual Avoide
	////
	//// Returns:		Void
	////
	//// Mod. Name: JF
	//// Mod. Date: 6/2/12
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//void Avoide (IBaseObject* _pHazard);

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CComponent_AI():	Default Constructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CComponent_AI ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CComponent_AI():	Default Destructor
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	~CComponent_AI ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Initialize():	virtual Initialize, Inits all ai information
	//
	// Returns:		bool
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Initialize ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Shutdown():	virtual Shutdown
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Shutdown ();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Update(float _fElapsedTime):	virtual Update, updates the ai information
	//
	// Returns:		Void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void Update ( float _fElapsedTime );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// InitLoadedAI (): Loops through all the loaded AI and inits them.
	//
	// Returns:		void
	//
	// Mod. Name: JF
	// Mod. Date: 6/2/12
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void InitLoadedAI ();

	
	/////////////////////////////
	//  Accessors
	/////////////////////////////
	//eAIType GetAIType () { return m_aiType; }
	//IBaseObject* GetCurPlatform () { return m_pCurPlatform; }
	//bool OnGround () { return m_bOnGround; }
	bool GetActive() { return m_bActive; }
	IBaseAI* GetCurAI () { return m_pCurrAI; }
	IBaseAI* GetLoadedAI (AIType _eType);

	/////////////////////////////
	//  Mutators
	/////////////////////////////
	//void SetAIType ( eAIType _aiType ) { m_aiType = _aiType; }	
	//void SetCurPlatform ( IBaseObject* _pObject) { m_pCurPlatform = _pObject; }
	//void SetOnGround ( bool _bOnGround ) { m_bOnGround = _bOnGround; }
	void SetActive( bool _bActive ) { m_bActive = _bActive; }
	
};
#endif